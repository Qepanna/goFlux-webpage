---
title: "Identify start and end of measurements"
format: 
  html: 
    css: styles.css
engine: knitr
---

```{r}
#| echo: false
#| output: false
library(dplyr)
library(purrr)
library(readxl)
library(goFlux)
```

After import, the user can choose from two methods to define the start and end points of each measurement and assign a UniqueID:

-   [**Automatic identification of measurements**](manualID.qmd#sec-auto) - based on automatic recordings of chamber opening and closing from an instrument such as the LI-COR Smart Chamber or the GAIATECH Automated ECOFlux chamber.
-   [**Manual identification of measurements**](manualID.qmd#sec-manID) - based on `start.time`, provided separately in an auxiliary file. The function `obs.win` splits the imported data into a list of data frame (divided by `UniqueID`) and creates an observation window around the `start.time` to allow for a manual selection of the start and end points of each measurements.

# **Automatic identification of measurements** {#sec-auto}

If the imported file already contains the column `chamID`, the file is ready for [flux calculation](goFlux.qmd).

```{r}
# Retrieve file path from example file in the goFlux package
# using the function system.file
file.path <- system.file("extdata", "LI8200/LI8200.json", package = "goFlux")

# Import in the environment
LI8200_imp <- LI8200_import(inputfile = file.path)

# Is there a column called chamID in this file?
any(grepl("chamID", names(LI8200_imp)))
```

Alternatively, one may want to modify the start and end time even if there are automatic recordings of chamber closure and opening. For example, there might be a delay after chamber closure that needs to be removed (e.g. LI-6400).

In such a case, you can choose from two options, and proceed to [step 2](manualID#sec-step2) of the manual identification of measurements:

-   Use the file generated by the instrument as `inputfile` (e.g. LI-6400) and do not provide an `auxfile` in the function `obs.win`.
-   Use the file generated by the greenhouse gas analyzer as `inputfile` (e.g. LI-7820) and the file generated by the chamber as `auxfile` (e.g. Smart Chamber) in the function `obs.win`.

From that point forward, follow the same procedure as for manual identification of measurements.

# **Manual identification of measurements** {#sec-manID}

The manual identification of measurements is done in three steps:

1.  [Create an auxiliary file](manualID.qmd#sec-step1)
2.  [Define a window of observation for each measurement](manualID.qmd#sec-step2)
3.  [Click on a scatter plot to identify start and end times](manualID.qmd#sec-step3)

## **1. Create an auxiliary file** {#sec-step1}

The auxiliary file (`auxfile`) requires two elements: a `UniqueID` and a `start.time` for each measurement. The `UniqueID` must be **unique**. For example, one could combine the name of a site (733a), a plot number (C) and a subplot (C), which would give the `UniqueID` "733a_C_C". If repeated measurements are done on the same experimental unit, then a date (e.g. 2022-09-28) could be added to the `UniqueID` (e.g. "733a_C_C_220928") to make it truly unique and easy to understand. The `start.time` must be in the format "%Y-%m-%d %H:%M:%S" (e.g. 2022-09-28 12:17:00) to be converted to POSIXct.

You can {{< downloadthis docs/example_auxfile.xlsx label="download" dname=example_auxfile id=auxfile-btn >}} an example Excel spreadsheet that you can use to create your auxiliary file.

### Load the auxfile

Creating an auxiliary file with date and time can be a pain, especially while using Excel. It is recommended to save your file as .txt before import into R, to make sure that the date and time formats are appropriate ("%Y-%m-%d %H:%M:%S", e.g. 2022-09-28 12:17:00).

#### As a text file (.txt)

In this example, the `start.time` for each measurement (`UniqueID`) was noted manually in the field, and are provided in an auxiliary file constructed in Excel and saved as a text file (`LGR_aux.txt`).

```{r}
aux.path <- system.file("extdata", "LGR_aux/LGR_aux.txt", package = "goFlux")
auxfile <- read.delim(aux.path) %>% 
  # Use the function as.POSIXct to convert start.time to a POSIXct format
  mutate(start.time = as.POSIXct(start.time, tz = "UTC"))
```

```{r}
#| echo: false
auxfile
```

#### As an Excel spreadsheet (.xlsx)

It is also possible to load an Excel sheet into R using the function `read_excel` from the package `readxl`.

```{r}
aux.path <- system.file("extdata", "LGR_aux/LGR_aux.xlsx", package = "goFlux")
auxfile.xlsx <- read_excel(aux.path)
```

You'll note that this function detects Date format and converts it to POSIXct automatically.

```{r}
class(auxfile.xlsx$start.time)
```

Make sure that the time zone in your `auxfile` matches the time zone in your imported gas measurements files. By default, all import functions, as well as the function `read_excel`, use the time zone UTC.

```{r}
auxfile.xlsx$start.time
```

In this example, the `auxfile` also contains [additional auxiliary data](manualID.qmd#sec-aux) that will be required for the flux calculation: the surface area inside the chamber (Area; cm^2^), the total volume inside the chamber, the tubing, and the instrument (Vtot; L), the atmospheric temperature inside the chamber (Tcham; Celsius) and the atmospheric pressure inside the chamber (Pcham; kPa).

### If start time is unknown

If field notes did not include the `start.time` of each measurement, it is possible to quickly construct an `auxfile` by visually inspecting each gas measurement files.

```{r}
# Retrieve file path from example file in the goFlux package
# using the function system.file
file.path <- system.file("extdata", "LGR/LGR.txt", package = "goFlux")

# Import in the environment
LGR_imp <- LGR_import(inputfile = file.path)

# Visualise data
plot(x = LGR_imp$POSIX.time, y = LGR_imp$CO2dry_ppm, # Data
     xlab = "Time", ylab = "CO2dry_ppm", # Labels
     ylim = c(400, 550)) # Plot limits
```

::: callout-tip
## Tip to improve x axis time display

To help visualize the time on the x axis, remove the x axis in the function `plot` and use the function `axis.POSIXct` to display the time in the desired format:

```{r}
#| eval: false
# Visualise data
plot(x = LGR_imp$POSIX.time, y = LGR_imp$CO2dry_ppm, # Data
     xlab = "Time", ylab = "CO2dry_ppm", # Labels
     ylim = c(400, 550), # Plot limits
     xaxt = 'n') # remove x axis tick marks

# get the right time zone from your data
time.zone <- attr(LGR_imp$POSIX.time, "tzone")
# force axis.POSIXct to use that time zone by changing the system timezone
Sys.setenv(TZ = time.zone)
# add the new x axis to the plot
axis.POSIXct(1, at = seq(min(LGR_imp$POSIX.time), max(LGR_imp$POSIX.time), 
                         by = "3 mins"), format = "%H:%M")
# change the system timezone back to default
Sys.unsetenv("TZ")
```
:::

In this example there are six measurements of approximately three minutes each. Looking at the graph, you can roughly estimate the start time of each measurement:

+------------+------------+-------------+--------------------+
| Peak\_#    | UniqueID   | start.time\ | start.time\        |
|            |            | (estimated) | (from field notes) |
+:==========:+:==========:+:===========:+:==================:+
| Peak_1     | 733a_C_S   | 12:12:00    | 12:11:00           |
+------------+------------+-------------+--------------------+
| Peak_2     | 733a_C_C   | 12:18:00    | 12:17:00           |
+------------+------------+-------------+--------------------+
| Peak_3     | 733a_C_E   | 12:23:00    | 12:21:00           |
+------------+------------+-------------+--------------------+
| Peak_4     | 733a_B_W   | 12:27:00    | 12:26:00           |
+------------+------------+-------------+--------------------+
| Peak_5     | 733a_B_S   | 12:33:00    | 12:31:00           |
+------------+------------+-------------+--------------------+
| Peak_6     | 733a_B_E   | 12:37:00    | 12:36:00           |
+------------+------------+-------------+--------------------+

In the next step (2), you will define a window of observation for each measurement based on the `start.time`, the observation length (`obs.length`) and some buffer time (`shoulder`) before and after the measurement. Knowing this, it does not matter how exact your estimation is, because you can allow for more buffer before and after the measurement.

## **2. Define a window of observation for each measurement** {#sec-step2}

In the next step (3), you must click on the start point and the end point of each measurement in a scatter plot to identify the `start.time` and the `end.time`, using the function `click.peak`. Before that, you must create a list of data frame containing one data frame per `UniqueID` using the function `obs.win`. In this example, this step will separate the file `LGR_imp` into a list of 6 data frame.

The purpose of this step is to zoom in on each measurement in the file to help you identify the start and end time more easily. In order to correctly zoom in on each measurement, you must know the `start.time` (defined in step 1) and the observation length (`obs.length`) of each measurement. In addition, you can define some buffer time around each measurement in case the defined `start.time` is not exact. If the observation length is different for each measurement, use the longest one.

### Usage {#sec-obs.win}

::: callout-note
Code chunks under **Usage** sections are not part of the demonstration. They are meant to show you how to use the arguments in the function.
:::

```{r}
#| eval: false
#| code-copy: false
obs.win(
  inputfile,
  auxfile = NULL,
  gastype = "CO2dry_ppm",
  obs.length = NULL,
  shoulder = 120
)
```

### Arguments

+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `inputfile`  | data.frame; output from import or align functions.                                                                                                                                                                                                                                                                                                                                                                                                  |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `auxfile`    | data.frame; auxiliary data frame containing the columns `start.time` and `UniqueID`. `start.time` must contain a date and be in POSIXct format. The time zone must be the same as the POSIX.time in `inputfile`. The default time zone for the import functions is "UTC". A data frame from the Smart Chamber (LI-8200) can be used as an auxiliary file. In that case, `chamID` will be used instead of `UniqueID`, if `UniqueID` cannot be found. |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `gastype`    | character string; specifies which gas should be displayed on the plot to manually select start time and end time of measurements. Must be one of the following: "CO2dry_ppm", "COdry_ppb", "CH4dry_ppb", "N2Odry_ppb", "NH3dry_ppb" or "H2O_ppm". Default is "CO2dry_ppm".                                                                                                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `obs.length` | numerical; chamber closure time (seconds). Default is NULL. If `obs.length` is not provided, a column `obs.length` should be contained in `auxfile` or `inputfile`. Alternatively, `obs.length` will be calculated from `start.time` and `cham.open` or `end.time` if found in `auxfile` or `inputfile`.                                                                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `shoulder`   | numerical; time before and after measurement in observation window (seconds). Default is 120 seconds.                                                                                                                                                                                                                                                                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

### Details

In `gastype`, the gas species listed are the ones for which this package has been adapted. Please write to the maintainer of this package for adaptation of additional gases.

### Example

In this example, the observation length was approximately three minutes (180 seconds) for each measurement. For a `shoulder` of 60 seconds, the observation window of each measurement will show 60 seconds before the `start.time` and 240 seconds after.

```{r}
#| eval: false
LGR_ow <- obs.win(inputfile = LGR_imp, auxfile = auxfile,
                  obs.length = 180, shoulder = 60)
```

| Peak\_# | UniqueID | start.time | obs.win min | obs.win max |
|:-------:|:--------:|:----------:|:-----------:|:-----------:|
| Peak_1  | 733a_C_S |  12:11:00  |  12:10:00   |  12:15:00   |
| Peak_2  | 733a_C_C |  12:17:00  |  12:16:00   |  12:21:00   |
| Peak_3  | 733a_C_E |  12:21:00  |  12:20:00   |  12:25:00   |
| Peak_4  | 733a_B_W |  12:26:00  |  12:25:00   |  12:30:00   |
| Peak_5  | 733a_B_S |  12:31:00  |  12:30:00   |  12:35:00   |
| Peak_6  | 733a_B_E |  12:36:00  |  12:35:00   |  12:40:00   |

::: callout-note
Note that, in this example, there is an overlap between the peaks 2 and 3. Therefore, 60 seconds of the data will be duplicated in the data frames of these two `UniqueID`.
:::

::: callout-tip
#### Tip: Use the function on multiple files at a time

To **load multiple RData files at once** in your environment and store them all in one object, use the function `map_df` from the package `purrr`.

Use the argument `pattern` to load only the files that match a pattern.

```{r}
#| eval: false
my.files <- list.files(path = "RData", pattern = "imp.RData", full.names = TRUE) %>%
  map_df(~ get(load(.x)))

LGR_ow <- obs.win(inputfile = my.files, auxfile = auxfile,
                  obs.length = 180, shoulder = 60)
```
:::

::: callout-warning
**Pay attention to the warning message given by `obs.win`** when there are more than 20 measurements (which is not the case in this example). If there had been more than 20 measurements, a warning like this would appear:

```{r}
#| echo: false
message("WARNING! Do not loop through more than 20 measurements at a time to avoid mistakes.", "\nYou have 21 measurements in your dataset.", "\nYou should split the next step into at least 2 loops.")
```

In such a case, follow [this tip](manualID.qmd#tip-click.peak.loop) with the function `click.peak.loop`
:::

## **3. Click on a scatter plot to identify start and end times** {#sec-step3}

When running the function `click.peak`, for each measurement, a window will open, in which you must click on the start point and the end point. The observation window is based on the `start.time` given in the `auxfile`, the length of the measurement (`obs.length`), and a `shoulder` before `start.time` and after `start.time + obs.length`.

### Usage

```{r}
#| eval: false
#| code-copy: false
click.peak(
  flux.unique,
  gastype = "CO2dry_ppm",
  sleep = 3,
  plot.lim = c(380, 1000),
  warn.length = 60
)
```

### Arguments

+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `flux.unique` | data.frame; output from the function [`obs.win`](manualID.qmd#sec-obs.win). Must contain the columns `gastype` (see below), `POSIX.time` and `UniqueID`.                                                                                                                                       |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `gastype`     | character string; specifies which gas should be displayed on the plot to manually select start time and end time of measurements. Must be one of the following: "CO2dry_ppm", "COdry_ppb", "CH4dry_ppb", "N2Odry_ppb", "NH3dry_ppb" or "H2O_ppm". Default is "CO2dry_ppm".                     |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `sleep`       | numerical value; delay before closing the resulting plot. When used with the function [`click.peak.loop`](manualID.qmd#tip-click.peak.loop), grants a delay between measurements to visually inspect the output before processing the next measurement. Sleep must be shorter than 10 seconds. |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `plot.lim`    | numerical vector of length 2; sets the Y axis limits in the plots. Default values are set for a typical gas measurement of "CO2dry_ppm" from soils: `plot.lim = c(380,1000)`.                                                                                                                  |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `warn.length` | numerical value; limit under which a measurement is flagged for being too short (`nb.obs < warn.length`). Default value is `warn.length = 60`.                                                                                                                                                 |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

### Details

The argument `plot.lim` is used to remove any data points below and above the plot limits for a better view of the scatter plot. If the gas measurements are larger than the minimum or smaller than the maximum plot limit values, then the plot will automatically zoom in and adjust to those values. The default plot limits are set for a typical gas measurement of "CO2dry_ppm" from a soil respiration measurement: `plot.lim = c(380,1000)`, where 380 ppm is the minimum plotted concentration, which should be close to atmospheric concentration, and 1000 ppm is the maximum plotted concentration, which correspond to a maximal accumulated concentration in the chamber before considering it an outlier (e.g. caused by breath or gas bubble). For other gasses, the user must specify the plot limits themselves. Here are some suggestions of plot limits for the other gases:

-   "CH4dry_ppb": `plot.lim = c(2200, 1800)`
-   "N2Odry_ppb": `plot.lim = c(250, 500)`
-   "NH3dry_ppb": `plot.lim = c(0, 200)`
-   "COdry_ppb": `plot.lim = c(0, 200)`
-   "H2O_ppm": `plot.lim = c(10000, 20000)`

These values will vary depending on ecosystem type and chamber application scheme.

`warn.length` is the limit below which the chamber closure time is flagged for being too short (`nb.obs < warn.length`). Portable greenhouse gas analyzers typically measure at a frequency of 1 Hz. Therefore, for the default setting of `warn.length = 60`, the chamber closure time should be approximately one minute (60 seconds). If the number of observations is smaller than the threshold, a warning is printed: "Number of observations for UniqueID: 'UniqueID' is X observations".

In `gastype`, the gas species listed are the ones for which this package has been adapted. Please write to the maintainer of this package for adaptation of additional gases.

### Value

The function returns a data.frame, identical to the input `flux.unique`, with the additional columns `flag`, `Etime`, `start.time_corr`, `end.time_corr` and `obs.length_corr`.

### Example

In this example, the observation time is 3 minutes (180 seconds) and the shoulder is 60 seconds. Therefore, the observation window shows 60 seconds before the `start.time` and 240 seconds after.

```{r}
#| eval: false
# Manually identify measurements by clicking on the start and end points
LGR_manID <- click.peak(LGR_ow[[2]])
```

![](images/click.peak1.png){#fig-click.peak1 fig-align="center"}

![](images/click.peak2.png){#fig-click.peak2 fig-align="center"}

::: {#tip-click.peak.loop .callout-tip}
Note that for **more than one gas measurement**, it is better to use the function `click.peak.loop` with `lapply` rather than using `click.peak` for each measurement individually.

```{r}
#| eval: false
# Manually identify measurements by clicking on the start and end points
LGR_manID <- lapply(seq_along(LGR_ow), click.peak.loop, flux.unique = LGR_ow) %>%
  map_df(., ~as.data.frame(.x))
```

If you need to create **multiple loops**, you can simply enumerate a subset of your `flux.unique`:

```{r}
#| eval: false
# Create two loops
LGR_manID.1 <- lapply(c(1:20), click.peak.loop, flux.unique = LGR_ow) %>%
  map_df(., ~as.data.frame(.x))

LGR_manID.2 <- lapply(c(21:40), click.peak.loop, flux.unique = LGR_ow) %>%
  map_df(., ~as.data.frame(.x))

# Combine the two objects back into one object
LGR_manID <- rbind(LGR_manID.1, LGR_manID.2)
```
:::

::: callout-tip
Between each measurement, the result of the `click.peak` function is displayed for 3 seconds. To increase this delay, change the parameter `sleep` in the function `click.peak.loop`.
:::

::: callout-warning
If the number of observation is under a certain threshold (`warn.length = 60`), a warning will be given after clicking on the start and end points as such:

```{r}
#| echo: false
message("Warning message: Number of observations for UniqueID: 733_C_C is 59 observations")
```

Otherwise, if the number of observation satisfies this threshold, then the following message is given instead:

```{r}
#| echo: false
message("Good window of observation for UniqueID: 733a_C_C")
```
:::

::: callout-tip
To **re-click on a single measurement** based on UniqueID, see [this example](troubleshoot.qmd) shown on the [Troubleshoot page](troubleshoot.qmd#sec-click.peak).
:::

## Additional auxiliary parameters {#sec-aux}

To convert the flux estimate's units into nmol CO~2~/H~2~O m^-2^s^-1^ or µmol CH~4~/N~2~O m^-2^s^-1^, the temperature inside the chamber (`Tcham`; °C) and the atmospheric pressure inside the chamber (`Pcham`; kPa) are also required. If `Pcham` and `Tcham` are missing, normal atmospheric pressure (101.325 kPa) and an air temperature of 15 °C are used as default.

Additionally, one must provide the surface area inside the chamber (`Area`; cm^2^) and the total volume in the system, including tubing, instruments and chamber (`Vtot`; L). If `Vtot` is missing, one must provide an offset (distance between the chamber and the soil surface; cm) and the volume of the chamber (`Vcham`; L). In that case, the volume inside the tubing and the instruments is considered negligible, or it should be added to `Vcham`.

The final output, before flux calculation with `goFlux` requires the columns: `UniqueID`, `Etime`, `flag`, `Vtot` (or `Vcham` and `offset`), `Area`, `Pcham`, `Tcham`, `H2O_ppm` and other gases.
